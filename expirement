// Author: supervitas

#ifdef GL_ES
precision mediump float;
#endif


uniform vec2 u_resolution;
uniform vec2 u_mouse;
uniform float u_time;

#define MAX_MARCHING_STEPS 256
#define MAX_DIST 50. // far
#define EPSILON 0.001
#define PI 3.1415926535



float random( in vec2 _st) {
  return fract(sin(dot(_st.xy,
      vec2(12.9898, 78.233))) *
    43758.5453123);
}


vec3 noise(vec2 p) {
  vec2 i = floor(p);
  vec2 f = fract(p);

  vec2 df = 15.0*f*f*(f*(f-2.0)+1.0);
  f = f*f*f*(f*(f*6.-15.)+10.);

  float a = random(i + vec2(0.5));
  float b = random(i + vec2(1.5, 0.5));
  float c = random(i + vec2(.5, 1.5));
  float d = random(i + vec2(1.5, 1.5));

  float k = a - b - c + d;
  float n = mix(mix(a, b, f.x), mix(c, d, f.x), f.y);

  return vec3(n, vec2(b - a + k * f.y, c - a + k * f.x) * df);
}



mat2 oceanProps = mat2(0.8,-.5, .9, 0.6);

float fbmL(vec2 p) {
  vec2 df = vec2(0.0);
  float f = 0.0;
  float w = 0.25;

  for (int i = 0; i < 6; i++) {
    vec3 n = noise(p);
    df += n.yz;
    f += abs(w * n.x / (1.0 + dot(df, df)));
    w *= 0.33;
    p = 2. * oceanProps * p;
  }
  return f;
}

mat2 underwatterprops = mat2(1.040, 0.468, 1.356, 0.776);

float fbmLUnder(vec2 p) {
  vec2 df = vec2(0.0);
  float f = 0.0;
  float w = .15;

  for (int i = 0; i < 2; i++) {
    vec3 n = noise(p);
    df += n.yz;
    f += abs(w * n.x / (1.0 + dot(df, df)));
    w *= 0.3;
    p = 2. * underwatterprops * p;
  }
  return f;
}


vec4 map(vec3 p) {
    vec4 scene = vec4(p.y, 0.0,0.0,0.0);
    vec4 color = vec4(0.0);
    
    vec2 pointOverTime = p.xz + u_time ;
    float ocean = fbmL(pointOverTime);

    scene.x -= ocean;

    scene.yzw = mix(vec3(0.224,0.588,0.630), vec3(0.053,0.020,0.190), ocean);


  	return scene;
}

mat3 inverse(mat3 m) {
  float a00 = m[0][0], a01 = m[0][1], a02 = m[0][2];
  float a10 = m[1][0], a11 = m[1][1], a12 = m[1][2];
  float a20 = m[2][0], a21 = m[2][1], a22 = m[2][2];

  float b01 = a22 * a11 - a12 * a21;
  float b11 = -a22 * a10 + a12 * a20;
  float b21 = a21 * a10 - a11 * a20;

  float det = a00 * b01 + a01 * b11 + a02 * b21;

  return mat3(b01, (-a22 * a01 + a02 * a21), (a12 * a01 - a02 * a11),
              b11, (a22 * a00 - a02 * a20), (-a12 * a00 + a02 * a10),
              b21, (-a21 * a00 + a01 * a20), (a11 * a00 - a01 * a10)) / det;
}



vec4 mapUnderWatter(vec3 pr) {
    vec3 p = inverse(
        mat3(1.0, 0.0, 0.0,
             0.0, 12.0, 0.0,
             0.0, .0, 1.0)) * pr;
    
    vec4 scene = vec4(p.y, 0.0,0.0,0.0);
    vec4 color = vec4(0.0);
    
    vec2 pointOverTime = p.xz;
    float sand = fbmLUnder(pointOverTime);

    scene.x -= sand;
    

    scene.yzw = mix(vec3(0.525,0.446,0.040), vec3(0.524,0.615,0.551), p.y + 0.1);

  	return scene;
}

vec4 raymarshUnderWatter(vec3 eye, vec3 marchingDirection) {
    float depth = 0.0;

    for (int i = 0; i < 128; i++) {
        vec4 dist = mapUnderWatter(eye + depth * marchingDirection);
        if (dist.x < EPSILON) {
			return vec4(depth, dist.yzw);
        }
        depth += dist.x;
        if (depth >= MAX_DIST) {
            break;
        }
    }

    return vec4(depth, vec3(0.0));
}

vec3 normal(vec3 pos, float t) {
	vec2  eps = vec2( 0.002*t, 0.0 );
    return normalize( vec3( fbmL(pos.xz-eps.xy) - fbmL(pos.xz+eps.xy),
                            2.0*eps.x,
                            fbmL(pos.xz-eps.yx) - fbmL(pos.xz+eps.yx) ) );
}


vec4 raymarsh(vec3 eye, vec3 marchingDirection) {
    float depth = 0.0;  

    for (int i = 0; i < MAX_MARCHING_STEPS; i++) {
        vec4 dist = map(eye + depth * marchingDirection);
        if (dist.x < EPSILON) {
            
            vec3 point = eye + dist.x * marchingDirection;
            vec3 normal =  normal(point, dist.x);
            
            vec3 refract = refract(normalize(eye), normal, 0.314);
            
            vec4 underwater = raymarshUnderWatter(eye, marchingDirection);
            
            
            vec4 result = vec4(depth, dist.yzw);
            
            result.x = min(result.x, underwater.x);
            // result.x = underwater.x;
            
            float distToUnder = underwater.x - dist.x;
            
            
            
            float seaOpac = 0.504;
            result.yzw = seaOpac * result.yzw + (1. - seaOpac) * underwater.yzw;
            // 0.5*(0,1,0) + (1-0.5)*(1,0.5,0.5);
            
            
			return result;
        }
        depth += dist.x;
        if (depth >= MAX_DIST) {
            break;
        }
    }

    return vec4(depth, vec3(0.0));
}

vec3 calcLights(vec3 p, vec3 eye, vec3 N) {
 vec3 L = normalize(vec3(5., 55.0,  50.));
 vec3 light = vec3(1.0) * max(dot(N, L), 0.);

  return light;
}

mat3 calcLookAtMatrix(vec3 origin, vec3 target, float roll) {
  vec3 rr = vec3(sin(roll), cos(roll), 0.0);
  vec3 ww = normalize(target - origin);
  vec3 uu = normalize(cross(ww, rr));
  vec3 vv = normalize(cross(uu, ww));

  return mat3(uu, vv, ww);
}

float getSun(vec2 uv) {
    float t = 0.840 ;// u_time * 0.25;
    vec2 position = vec2(sin(t), cos(t - 0.35));
    vec2 dist = uv - position;
    
    const float radius = 0.012;
    float isCircle = 1. - smoothstep(radius-(radius*0.984),
                         radius+(radius*1.336),
                         dot(dist,dist)*4.0);
	return isCircle;
}

void setSkyColor(out vec3 color, vec3 dir) {
   vec2 uv =  gl_FragCoord.xy/u_resolution.xy;
   color = mix(vec3(0.323,0.701,0.830), vec3(0.015,0.630,0.720), min(uv.y - 0.5, 1.0));
   float sun = getSun(uv);
   color = mix(color, vec3(0.935,0.633,0.032), sun);
}

vec3 trace(vec3 ro, vec3 rd) {   
  vec4 scene = raymarsh(ro, rd);
  vec3 point = ro + scene.x * rd;
    
  vec3 l = normalize(vec3(1.0, 0.0, -1.0));
  vec3 color = vec3(0.);
    
  float depth = scene.x;
  if (depth < MAX_DIST) {
    vec3 nor = normal(point, scene.x);
    color = scene.yzw;
    color *= calcLights(point, ro, nor);
  
  } else {
    setSkyColor(color, rd);
  }
    
 return color;
}



void main() {
  vec2 uv =  gl_FragCoord.xy/u_resolution.xy;
  vec2 p = (-u_resolution.xy + 2.0 * gl_FragCoord.xy) / u_resolution.y;

  vec3 ro = vec3(0.,2.8, u_time);

  vec3 target = ro + vec3(0., -0.2, 1.0);
  mat3 cam = calcLookAtMatrix(ro, target, 0.);
  vec3 rd = cam * normalize(vec3(p.xy, 1.0));

  vec3 color = trace(ro, rd);

  color = pow(color, vec3(1. / 2.2)); // gamma correction
  color *= 0.1+0.55*pow( 16.0 * uv.x * uv.y * (1.0 - uv.x) * (1.0 - uv.y), 0.3 ); // Vigneting

  color = smoothstep(0., 0.488, color); 

  gl_FragColor = vec4(color,1.0);
}
